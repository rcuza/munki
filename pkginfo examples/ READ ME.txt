Use 'makepkginfo' to create pkginfo files - it does the hard work so you don't have to!

These examples don't show all the supported keys.  Here's a few more:
	
There are two types of dependency/relationship keys.

'requires' are prerequisites: package A requires package B be installed first.
if package A is removed, package B is unaffected.
'requires' is an array of itemnames.

<key>requires</key>
<array>
	<string>TextWrangler</string>
</array>

The format for 'requires' is identical to the managed_installs key in the manifest. 
No checking is done for circular dependencies - so don't make any.

The second type of relationship is "update_for".
This signifies that that current package should be considered an update
for the packages listed in the "update_for" array. When processing a
package, we look through the catalogs for other packages that declare
they are updates for the current package and install them if needed.
This can be a one-to-many relationship - one package can be an update 
for several other packages; for example, "PhotoshopCS4update-11.0.1" 
could be an update for PhotoshopCS4 and for AdobeCS4DesignSuite.

When removing an item, any updates for that item are removed as well, if possible.


Supported architectures:
If an installer item is valid only for PowerPC or only for Intel, you can include a supported_architectures key:

<key>supported_architectures</key>
<array>
	<string>powerpc</string>
	<string>i386</string>
</array>
	
If this key is missing, it is assumed the installer item is valid for both PowerPC and Intel, so generally you'd have only "powerpc" or "i386" here.
	